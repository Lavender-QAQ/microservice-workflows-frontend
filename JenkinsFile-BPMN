pipeline {
  agent {
    node {
      label 'nodejs'
    }
  }

  parameters {
      string(name:'PROJECT_VERSION',defaultValue: '0.1.0',description:'项目版本号')
      choice(name:'PROJECT_NAME', choices: ['platform-bpmn'],description:'项目名称')
      choice(name:'BRANCH_NAME', choices: ['dev', 'main'], description:'项目分支')
  }

  environment {
      DOCKER_CREDENTIAL_ID = 'harbor-id'
      GITEE_CREDENTIAL_ID = 'gitee-id'
      KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
      REGISTRY = '192.168.31.60'
      DOCKERHUB_NAMESPACE = 'resource_platform'
  }

  stages {
    stage('拉取代码') {
      steps {
        container('nodejs') {
          git(credentialsId: 'gitee-id', url: 'https://gitee.com/lavender-qaq/Microservice-Workflows.git', branch: "$BRANCH_NAME", changelog: true, poll: false)
        }
      }
    }

    stage('get dependencies') {
      steps {
        container('nodejs') {
          sh 'cd bpmn_workflow && npm install -g cnpm --registry=https://registry.npm.taobao.org'
          sh 'cd bpmn_workflow && cnpm i --no-package-lock'
        }
      }
    }

    stage('build & push snapshot') {
      steps {
        container('nodejs') {
          sh 'cd bpmn_workflow && npm run build'
          sh 'cd bpmn_workflow && docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:$PROJECT_VERSION-$BRANCH_NAME-$BUILD_NUMBER .'
          withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "$DOCKER_CREDENTIAL_ID" ,)]) {
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
            sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:$PROJECT_VERSION-$BRANCH_NAME-$BUILD_NUMBER'
            sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:$PROJECT_VERSION-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:latest '
            sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:latest '
          }
        }
      }
    }

    stage('deploy to production') {
      steps {
        container ('nodejs') {
          withCredentials([
            kubeconfigFile(
              credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
              variable: 'KUBECONFIG')
            ]) {
            sh 'envsubst < bpmn_workflow/deploy/platform-bpmn-deploy.yaml | kubectl apply -f -'
          }
        }
      }
    }
  }
}